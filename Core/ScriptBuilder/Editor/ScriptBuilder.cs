using System.IO;
using UnityEditor;

namespace Utils.Core.ScriptBuilder
{
    public class ScriptBuilder
    {
        public const string SCRIPT_EXTENSION = ".cs";
        public const string DEFAULT_FOLDER_LOCATION = "Scripts/AutoGenerated/";

        public void CreateScript(string fileName, string classContent, string folderPath = DEFAULT_FOLDER_LOCATION, string extension = SCRIPT_EXTENSION)
        {
            File.WriteAllText(folderPath + fileName + extension, classContent);
            AssetDatabase.ImportAsset("Assets/" + folderPath + fileName + extension, ImportAssetOptions.ForceUpdate);
        }

        public string GetClassContent(string className, string[] labelsArray, bool classIsPartial = false)
        {
            string output = "";
            output += "//This class is auto-generated by " + this.GetType().Name + ", do not modify." + "\n";
            string partialString = "";
            if (classIsPartial)
                partialString = " partial";
            output += "public" + partialString + " class " + className + "\n";
            output += "{\n";
            foreach (string label in labelsArray)
            {
                output += "\t" + BuildConstVariable(label) + "\n";
            }
            output += "}";
            return output;
        }

        public string BuildConstVariable(string varName)
        {
            return "public const string " + ToUpperCaseWithUnderscores(varName) + " = " + '"' + varName + '"' + ";";
        }

        public string ToUpperCaseWithUnderscores(string input)
        {
            string output = "" + input[0];

            // variables are not allowed to start with a digit, so if it does, start the output with an underscore.
            if (char.IsDigit(input[0]))
            {
                output = "_" + output;
            }

            for (int n = 1; n < input.Length; n++)
            {
                if ((char.IsUpper(input[n]) || input[n] == ' ') && !char.IsUpper(input[n - 1]) && input[n - 1] != '_' && input[n - 1] != ' ')
                {
                    output += "_";
                }

                if (input[n] != ' ' && input[n] != '_')
                {
                    output += input[n];
                }
            }

            output = output.ToUpper();
            return output;
        }
    }
}